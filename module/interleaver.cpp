#include "interleaver.h"

#include <glog/logging.h>

#include "common/configuration.h"
#include "common/constants.h"
#include "common/monitor.h"
#include "common/proto_utils.h"
#include "proto/internal.pb.h"

using std::shared_ptr;

namespace slog {

using internal::Envelope;
using internal::Request;
using internal::Response;

void LocalLog::AddBatchId(uint32_t queue_id, uint32_t position, BatchId batch_id) {
  batch_queues_[queue_id].Insert(position, batch_id);
  UpdateReadyBatches();
}

void LocalLog::AddSlot(SlotId slot_id, uint32_t queue_id, MachineId leader) {
  slots_.Insert(slot_id, std::make_pair(queue_id, leader));
  UpdateReadyBatches();
}

bool LocalLog::HasNextBatch() const { return !ready_batches_.empty(); }

std::pair<SlotId, std::pair<BatchId, MachineId>> LocalLog::NextBatch() {
  if (!HasNextBatch()) {
    throw std::runtime_error("NextBatch() was called when there is no batch");
  }
  auto next_batch = ready_batches_.front();
  ready_batches_.pop();
  return next_batch;
}

void LocalLog::UpdateReadyBatches() {
  while (slots_.HasNext()) {
    auto [next_queue_id, leader] = slots_.Peek();
    if (batch_queues_.count(next_queue_id) == 0) {
      break;
    }
    auto& next_queue = batch_queues_.at(next_queue_id);
    if (!next_queue.HasNext()) {
      break;
    }
    auto slot_id = slots_.Next().first;
    auto batch_id = next_queue.Next().second;
    ready_batches_.emplace(slot_id, std::make_pair(batch_id, leader));
  }
}

Interleaver::Interleaver(const ConfigurationPtr& config, const shared_ptr<Broker>& broker,
                         std::chrono::milliseconds poll_timeout)
    : NetworkedModule("Interleaver", broker, kInterleaverChannel, poll_timeout),
      config_(config),
      rg_(std::random_device()()) {
  for (uint32_t p = 0; p < config_->num_partitions(); p++) {
    if (p != config_->local_partition()) {
      other_partitions_.push_back(config_->MakeMachineId(config->local_replica(), p));
    }
  }
}

void Interleaver::OnInternalRequestReceived(EnvelopePtr&& env) {
  auto request = env->mutable_request();
  if (request->type_case() == Request::kLocalQueueOrder) {
    auto& order = request->local_queue_order();
    VLOG(1) << "Received local queue order. Slot id: " << order.slot() << ". Queue id: " << order.queue_id();

    local_log_.AddSlot(order.slot(), order.queue_id(), order.leader());

  } else if (request->type_case() == Request::kForwardBatch) {
    auto forward_batch = request->mutable_forward_batch();
    auto [from_replica, from_partition] = config_->UnpackMachineId(env->from());

    switch (forward_batch->part_case()) {
      case internal::ForwardBatch::kBatchData: {
        auto batch = BatchPtr{forward_batch->release_batch_data()};

        TRACE(batch.get(), TransactionEvent::ENTER_INTERLEAVER_IN_BATCH);

        VLOG(1) << "Received data for batch " << batch->id() << " from [" << env->from()
                << "]. Number of txns: " << batch->transactions_size();

        if (from_replica == config_->local_replica()) {
          local_log_.AddBatchId(from_partition /* queue_id */,
                                // Batches generated by the same machine need to follow the order
                                // of creation. This field is used to keep track of that order
                                forward_batch->same_origin_position(), batch->id());
        }

        single_home_logs_[from_replica].AddBatch(move(batch));
        break;
      }
      case internal::ForwardBatch::kBatchOrder: {
        auto& batch_order = forward_batch->batch_order();

        VLOG(1) << "Received order for batch " << batch_order.batch_id() << " (home = " << batch_order.home()
                << ") from [" << env->from() << "]. Slot: " << batch_order.slot();

        // If this batch order comes from another replica, send this order to other partitions in the local replica
        if (from_replica != config_->local_replica()) {
          Send(*env, other_partitions_, kInterleaverChannel);
        }

        single_home_logs_[batch_order.home()].AddSlot(batch_order.slot(), batch_order.batch_id());
        break;
      }
      default:
        break;
    }
  }

  AdvanceLogs();
}

void Interleaver::AdvanceLogs() {
  // Advance local log
  auto local_replica = config_->local_replica();
  while (local_log_.HasNextBatch()) {
    auto next_batch = local_log_.NextBatch();
    auto slot_id = next_batch.first;
    auto [batch_id, leader] = next_batch.second;

    // Each entry in the local log is associated with a leader. If the current machine is the leader, it
    // is in charged of replicating the batch id and slot id to other regions
    if (config_->local_machine_id() == leader) {
      Envelope env;
      auto forward_batch_order = env.mutable_request()->mutable_forward_batch()->mutable_batch_order();
      forward_batch_order->set_batch_id(batch_id);
      forward_batch_order->set_slot(slot_id);
      forward_batch_order->set_home(local_replica);
      std::uniform_int_distribution<> rnd(0, config_->num_partitions() - 1);
      auto part = rnd(rg_);
      vector<MachineId> destinations;
      for (uint32_t rep = 0; rep < config_->num_replicas(); rep++) {
        if (rep != local_replica) {
          destinations.push_back(config_->MakeMachineId(rep, part));
        }
      }
      Send(env, destinations, kInterleaverChannel);
    }

    single_home_logs_[local_replica].AddSlot(slot_id, batch_id);
  }

  // Advance single-home logs
  for (auto& pair : single_home_logs_) {
    auto& log = pair.second;
    while (log.HasNextBatch()) {
      EmitBatch(log.NextBatch().second);
    }
  }
}

void Interleaver::EmitBatch(BatchPtr&& batch) {
  VLOG(1) << "Processing batch " << batch->id() << " from global log";

  auto transactions = Unbatch(batch.get());
  for (auto txn : transactions) {
    TRACE(txn->mutable_internal(), TransactionEvent::EXIT_INTERLEAVER);

    auto env = NewEnvelope();
    auto forward_txn = env->mutable_request()->mutable_forward_txn();
    forward_txn->set_allocated_txn(txn);
    Send(move(env), kSchedulerChannel);
  }
}

}  // namespace slog