syntax = "proto3";

import "transaction.proto";

package slog.internal;

message MachineId {
    uint32 replica = 1;
    uint32 partition = 2;
}

message Batch {
    uint32 id = 1;
    repeated Transaction transactions = 2;
}

/***********************************************
                    REQUESTS
***********************************************/
/**
 * The first message of a communication between two entities is
 * always a Request. Some types of Request needs a Response
 * (e.g. LookUpMaster), some other do not (one-way request).
 */
message Request {
    oneof type {
        EchoRequest echo = 1;
        ReadyRequest ready = 2;
        ForwardTransactionRequest forward_txn = 3;
        LookupMasterRequest lookup_master = 4;
        ForwardBatchRequest forward_batch = 5;
        PaxosProposeRequest paxos_propose = 6;
        PaxosAcceptRequest paxos_accept = 8;
        PaxosCommitRequest paxos_commit = 9;
        OrderRequest order = 10;
    }
}

/**
 * For debugging and testing purposes
 */
message EchoRequest {
    bytes data = 1;
}

/**
 * Used by the Broker to notify others its presence. Some
 * identifiers are included so that the receivers can build a
 * map of the whole network.
 */
message ReadyRequest {
    bytes ip_address = 1;
    MachineId machine_id = 2;
}

message ForwardTransactionRequest {
    Transaction txn = 1;
}

message LookupMasterRequest {
    uint32 txn_id = 1;
    repeated string keys = 2;
}

message ForwardBatchRequest {
    Batch batch = 1;
}

message PaxosProposeRequest {
    uint32 value = 1;
}

message PaxosAcceptRequest {
    uint32 ballot = 1;
    uint32 slot = 2;
    uint32 value = 3;
}

message PaxosCommitRequest {
    uint32 ballot = 1;
    uint32 slot = 2;
    uint32 value = 3;
}

message OrderRequest {
    uint32 slot = 1;
    uint32 value = 2;
}

/***********************************************
                    RESPONSES
***********************************************/
/**
 * A response is always preceeded by a Request
 */
message Response {
    oneof type {
        EchoResponse echo = 1;
        LookupMasterResponse lookup_master = 2;
        ForwardBatchResponse forward_batch = 3;
        PaxosAcceptResponse paxos_accept = 4;
        PaxosCommitResponse paxos_commit = 5;
    }
}

/**
 * For debugging and testing purposes
 */
message EchoResponse {
    bytes data = 1;
}

message LookupMasterResponse {
    uint32 txn_id = 1;
    map<string, MasterMetadata> master_metadata = 2;
}

message ForwardBatchResponse {
    uint32 batch_id = 1;
}

message PaxosAcceptResponse {
    uint32 ballot = 1;
    uint32 slot = 2;
}

message PaxosCommitResponse {
    uint32 slot = 1;
}
